{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\ScreemFolder\\\\NotificationScreen\\\\NotificationScreen.js\";\nimport * as React from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\n\nfunction NotificationScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dataSource = _React$useState2[0],\n      setDataSource = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  var getData = function getData() {\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              AsyncStorage.getItem('user').then(function (value) {\n                var jsonValue = JSON.parse(value);\n                setDataSource(jsonValue);\n              });\n            } catch (e) {\n              console.log(e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  console.log('sssssss' + dataSource);\n  React.useEffect(function () {\n    getData();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, dataSource.name));\n}\n\nexport { NotificationScreen };","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/ScreemFolder/NotificationScreen/NotificationScreen.js"],"names":["React","NotificationScreen","navigation","useState","dataSource","setDataSource","isLoading","setLoading","getData","AsyncStorage","getItem","then","value","jsonValue","JSON","parse","e","console","log","useEffect","flex","alignItems","justifyContent","name"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAGA,SAASC,kBAAT,OAA4C;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,wBACNF,KAAK,CAACG,QAAN,CAAe,EAAf,CADM;AAAA;AAAA,MACnCC,UADmC;AAAA,MACvBC,aADuB;;AAAA,yBAEVL,KAAK,CAACG,QAAN,CAAe,IAAf,CAFU;AAAA;AAAA,MAEnCG,SAFmC;AAAA,MAExBC,UAFwB;;AAG1C,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AACd,gBAAI;AACFC,cAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAA7B,CAAkC,UAACC,KAAD,EAAW;AAC3C,oBAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAlB;AACAP,gBAAAA,aAAa,CAACQ,SAAD,CAAb;AACD,eAHD;AAID,aALD,CAKE,OAAMG,CAAN,EAAS;AACTC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;;AARa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAUAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYd,UAAxB;AACAJ,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAM;AACpBX,IAAAA,OAAO;AACR,GAFD,EAEG,EAFH;AAGE,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEY,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOlB,UAAU,CAACmB,IAAlB,CADF,CADF;AAKH;;AACD,SAAQtB,kBAAR","sourcesContent":["import * as React from 'react';\r\nimport { Button, View, Text } from 'react-native';\r\n\r\nfunction NotificationScreen({ navigation }) {\r\n  const [dataSource, setDataSource ]= React.useState([]);\r\n  const [isLoading, setLoading] = React.useState(true);\r\n  const getData = async () => {\r\n    try {\r\n      AsyncStorage.getItem('user').then((value) => {\r\n        const jsonValue = JSON.parse(value);\r\n        setDataSource(jsonValue);\r\n      })\r\n    } catch(e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  console.log('sssssss' + dataSource)\r\n  React.useEffect(() => {\r\n    getData();\r\n  }, []);\r\n    return (\r\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n        <Text>{dataSource.name}</Text>\r\n      </View>\r\n    );\r\n}\r\nexport {NotificationScreen};"]},"metadata":{},"sourceType":"module"}