{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\users\\\\ScreemFolder\\\\NotificationScreen\\\\ChatScreen.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { SplashScreen } from \"../OtherScreen\";\nimport { useFocusEffect } from '@react-navigation/native';\n\nfunction ChatScreen(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      chatMessage = _React$useState2[0],\n      setChatMessage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      contentMassage = _React$useState4[0],\n      setContentMassage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(true),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isLoading = _React$useState6[0],\n      setLoading = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      dataUser = _React$useState8[0],\n      setDataUser = _React$useState8[1];\n\n  var _React$useState9 = React.useState(true),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      send = _React$useState10[0],\n      setSend = _React$useState10[1];\n\n  useFocusEffect(React.useCallback(function () {\n    props.navigation.dangerouslyGetParent().setOptions({\n      tabBarVisible: false\n    });\n    getData();\n    return function () {\n      props.navigation.dangerouslyGetParent().setOptions({\n        tabBarVisible: true\n      });\n    };\n  }, []));\n\n  var getData = function getData() {\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              AsyncStorage.getItem('user').then(function (value) {\n                var jsonValue = JSON.parse(value);\n                setDataUser(jsonValue);\n                getMessage(jsonValue.user_id);\n              });\n            } catch (e) {\n              console.log(e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getMessage = function getMessage(user_id) {\n    fetch('http://192.168.0.100:19000/get_messages/' + user_id + '/' + props.route.params.item.a).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      setChatMessage(res);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      setLoading(false);\n    });\n  };\n\n  function submitChatMessage() {\n    fetch('http://192.168.0.100:19000/send_message', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'sender_id': dataUser.user_id,\n        'messages_content': contentMassage,\n        'receiver_id': props.route.params.item.a\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      getMessage(dataUser.user_id);\n      setContentMassage('');\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  function onChangeValue(text) {\n    setContentMassage(text);\n\n    if (text.length > 0) {\n      setSend(false);\n    } else {\n      setSend(true);\n    }\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, isLoading ? React.createElement(SplashScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 23\n    }\n  }) : React.createElement(FlatList, {\n    data: chatMessage,\n    keyExtractor: function keyExtractor(item) {\n      return item.message_id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'column'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }, item.sender_id != dataUser.user_id ? React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          marginTop: 10,\n          marginRight: '20%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, React.createElement(Image, {\n        style: styles.img,\n        source: {\n          uri: item.user_avatar\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }\n      }), React.createElement(View, {\n        style: [styles.chatmessage, {\n          backgroundColor: 'white',\n          marginLeft: 10\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 22\n        }\n      }, React.createElement(Text, {\n        style: styles.textName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 24\n        }\n      }, item.massage_content))) : React.createElement(View, {\n        style: {\n          flex: 1,\n          flexDirection: 'row',\n          marginTop: 10,\n          marginLeft: '20%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, React.createElement(View, {\n        style: [styles.chatmessage, {\n          backgroundColor: 'lightblue',\n          marginRight: 10\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 23\n        }\n      }, React.createElement(Text, {\n        style: styles.textName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      }, item.massage_content)), React.createElement(Image, {\n        style: styles.img,\n        source: {\n          uri: item.user_avatar\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 23\n        }\n      })));\n    },\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: ListEmpty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    style: {\n      justifyContent: 'flex-end',\n      backgroundColor: 'white',\n      width: '100%',\n      height: 50,\n      flexDirection: 'row',\n      paddingRight: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      height: 40,\n      margin: 5,\n      backgroundColor: '#f2f2f2',\n      width: '80%'\n    },\n    autoCorrect: false,\n    placeholder: \"Enter message....\",\n    value: contentMassage,\n    onSubmitEditing: function onSubmitEditing() {\n      return submitChatMessage();\n    },\n    onChangeText: function onChangeText(text) {\n      return onChangeValue(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }), React.createElement(TouchableOpacity, {\n    disabled: send,\n    onPress: function onPress() {\n      return submitChatMessage();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, React.createElement(Ionicons, {\n    name: \"md-send\",\n    size: 45,\n    color: \"#aa4fff\",\n    style: {\n      marginLeft: 10,\n      marginRight: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }))));\n\n  function ListEmpty() {\n    return React.createElement(View, {\n      style: {\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"Send message to start communication!!!\"));\n  }\n}\n\nexport { ChatScreen };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    marginTop: 10,\n    borderColor: '#8a2be2'\n  },\n  chatmessage: {\n    width: '80%',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n    padding: 10,\n    borderRadius: 20\n  },\n  img: {\n    width: 40,\n    height: 40,\n    borderRadius: 50\n  },\n  textName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginLeft: 20\n  }\n});","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/users/ScreemFolder/NotificationScreen/ChatScreen.js"],"names":["React","Ionicons","SplashScreen","useFocusEffect","ChatScreen","props","useState","chatMessage","setChatMessage","contentMassage","setContentMassage","isLoading","setLoading","dataUser","setDataUser","send","setSend","useCallback","navigation","dangerouslyGetParent","setOptions","tabBarVisible","getData","AsyncStorage","getItem","then","value","jsonValue","JSON","parse","getMessage","user_id","e","console","log","fetch","route","params","item","a","response","json","res","catch","error","finally","submitChatMessage","method","headers","Accept","body","stringify","onChangeValue","text","length","styles","container","flex","message_id","toString","flexDirection","sender_id","marginTop","marginRight","img","uri","user_avatar","chatmessage","backgroundColor","marginLeft","textName","massage_content","ListEmpty","justifyContent","width","height","paddingRight","margin","alignItems","fontSize","fontWeight","textAlign","StyleSheet","create","borderColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","padding","borderRadius"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Dimensions, View, TextInput, Text, TouchableOpacity, FlatList, Image, AsyncStorage} from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons'; \r\nimport {SplashScreen} from '../OtherScreen';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\n\r\nfunction ChatScreen(props) {\r\n    const [chatMessage, setChatMessage] = React.useState([]);\r\n    const [contentMassage, setContentMassage] = React.useState('');\r\n    const [isLoading, setLoading] = React.useState(true);\r\n    const [dataUser, setDataUser] = React.useState([]);\r\n    const [send, setSend] = React.useState(true);\r\n\r\n    useFocusEffect(\r\n      React.useCallback(() => {\r\n      props.navigation.dangerouslyGetParent().setOptions({\r\n        tabBarVisible: false\r\n      });\r\n      getData();\r\n      return () => {\r\n        props.navigation.dangerouslyGetParent().setOptions({\r\n          tabBarVisible: true\r\n      })}\r\n    },[]));\r\n    const getData = async () => {\r\n      try {\r\n        AsyncStorage.getItem('user').then((value) => {\r\n          const jsonValue = JSON.parse(value);\r\n          setDataUser(jsonValue);\r\n          getMessage(jsonValue.user_id);\r\n        })\r\n      } catch(e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n\r\n    const getMessage=(user_id)=> {\r\n      fetch('http://192.168.0.100:19000/get_messages/' + user_id +'/'+ props.route.params.item.a)\r\n      .then ((response) => response.json())\r\n      .then ( (res) => { \r\n        setChatMessage(res);\r\n      })\r\n      .catch ((error) => {\r\n        console.log(error);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false) \r\n      });\r\n    }\r\n\r\n    function submitChatMessage() {\r\n      fetch('http://192.168.0.100:19000/send_message', {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            'sender_id': dataUser.user_id,\r\n            'messages_content': contentMassage,\r\n            'receiver_id' : props.route.params.item.a\r\n        })\r\n    })\r\n    .then ((response) => response.json())\r\n    .then ( (res) => { \r\n        getMessage(dataUser.user_id);\r\n        setContentMassage('');\r\n    })\r\n    .catch ((error) => {\r\n        console.log(error);\r\n    })\r\n    }\r\n\r\n    function onChangeValue(text) {\r\n      setContentMassage(text);\r\n      if (text.length > 0) {\r\n        setSend(false);\r\n      } else {\r\n        setSend(true);\r\n      }\r\n    }\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={{flex: 1}}>\r\n          {isLoading? <SplashScreen/>:(\r\n            <FlatList\r\n              data={chatMessage}\r\n              keyExtractor= {item => item.message_id.toString()}\r\n              renderItem={({ item }) => (\r\n                <View style={{flex: 1, flexDirection: 'column'}}>\r\n                  {item.sender_id != dataUser.user_id ? (\r\n                    <View style={{flex: 1, flexDirection: 'row', marginTop: 10, marginRight: '20%'}}>\r\n                      <Image\r\n                         style={styles.img}\r\n                         source= {{uri: item.user_avatar}}\r\n                       />\r\n                     <View style={[styles.chatmessage, {backgroundColor: 'white', marginLeft: 10}]}>\r\n                       <Text style={styles.textName}>{item.massage_content}</Text>\r\n                     </View>\r\n                   </View>\r\n                  ): (\r\n                    <View style={{flex: 1, flexDirection: 'row', marginTop: 10, marginLeft: '20%'}}>\r\n                      <View style={[styles.chatmessage, {backgroundColor: 'lightblue', marginRight: 10}]}>\r\n                        <Text style={styles.textName}>{item.massage_content}</Text>\r\n                      </View>\r\n                      <Image\r\n                          style={styles.img}\r\n                          source= {{uri: item.user_avatar}}\r\n                        />\r\n                    </View>\r\n                  )}\r\n                </View>\r\n              )}  \r\n              showsHorizontalScrollIndicator={false}\r\n              ListEmptyComponent={ListEmpty}\r\n            /> \r\n          )}\r\n        </View>\r\n        <View style={{justifyContent: 'flex-end', backgroundColor: 'white', width: '100%', height: 50, flexDirection: 'row', paddingRight: 5}}>\r\n          <TextInput\r\n            style={{ height: 40, margin: 5, backgroundColor: '#f2f2f2', width: '80%'}}\r\n            autoCorrect={false}\r\n            placeholder= 'Enter message....'\r\n            value={contentMassage}\r\n            onSubmitEditing={() => submitChatMessage()}\r\n            onChangeText={text =>  onChangeValue(text)}\r\n          />\r\n          <TouchableOpacity disabled = {send} onPress={()=> submitChatMessage()}>\r\n            <Ionicons name=\"md-send\" size={45} color=\"#aa4fff\" style={{ marginLeft: 10, marginRight: 10}} />\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n    )   \r\n\r\n    function ListEmpty() {\r\n      return(\r\n        <View style={{justifyContent: 'center', alignItems: 'center'}}>\r\n          <Text style={{fontSize: 18, fontWeight: 'bold', textAlign: 'center'}}>Send message to start communication!!!</Text>\r\n        </View>\r\n      )\r\n    }\r\n} export {ChatScreen};\r\n \r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        marginTop: 10,\r\n        borderColor: '#8a2be2',\r\n    },\r\n    chatmessage: {\r\n      width: '80%',\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 2,\r\n      },\r\n      shadowOpacity: 0.25,\r\n      shadowRadius: 3.84,\r\n      elevation: 5,\r\n      padding: 10,\r\n      borderRadius: 20\r\n    },\r\n    img: {\r\n      width: 40, \r\n      height: 40, \r\n      borderRadius: 50\r\n    },\r\n    textName: {\r\n      fontSize: 18, \r\n      fontWeight: 'bold', \r\n      marginLeft: 20}\r\n\r\n});"]},"metadata":{},"sourceType":"module"}