{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\ScreemFolder\\\\StoryScreen\\\\ReadingScreen.js\";\nimport * as React from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { FlatList } from 'react-native-gesture-handler';\nimport { ModalChapterContent } from \"../../Components\";\n\nfunction ReadingScreen(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dataSource = _React$useState2[0],\n      setDataSource = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  React.useEffect(function () {\n    fetch('http://192.168.1.8:19000/chapter_content/' + props.route.params.item.story_id + '/' + props.route.params.chapter_id).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      console.log('kq:' + res);\n      setDataSource(res);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      setLoading(false);\n    });\n  });\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, React.createElement(FlatList, {\n    data: dataSource,\n    keyExtractor: function keyExtractor(item) {\n      return item.chapter_id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: {\n          padding: 5,\n          fontSize: 13\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }\n      }, item.chapter_content));\n    },\n    showsHorizontalScrollIndicator: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), React.createElement(ModalChapterContent, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  })));\n}\n\nexport { ReadingScreen };","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/ScreemFolder/StoryScreen/ReadingScreen.js"],"names":["React","FlatList","ModalChapterContent","ReadingScreen","props","useState","dataSource","setDataSource","isLoading","setLoading","useEffect","fetch","route","params","item","story_id","chapter_id","then","response","json","res","console","log","catch","error","finally","flex","alignItems","justifyContent","toString","padding","fontSize","chapter_content"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAEA,SAASC,QAAT,QAAyB,8BAAzB;AACA,SAASC,mBAAT;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,wBACQJ,KAAK,CAACK,QAAN,CAAe,EAAf,CADR;AAAA;AAAA,MACrBC,UADqB;AAAA,MACTC,aADS;;AAAA,yBAEIP,KAAK,CAACK,QAAN,CAAe,IAAf,CAFJ;AAAA;AAAA,MAErBG,SAFqB;AAAA,MAEVC,UAFU;;AAI5BT,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM;AAEpBC,IAAAA,KAAK,CAAC,8CAA8CP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwBC,QAAtE,GAAiF,GAAjF,GAAuFX,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBG,UAA3G,CAAL,CACCC,IADD,CACO,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADP,EAECF,IAFD,CAEQ,UAACG,GAAD,EAAS;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,GAApB;AACAb,MAAAA,aAAa,CAACa,GAAD,CAAb;AACD,KALD,EAMCG,KAND,CAMQ,UAACC,KAAD,EAAW;AACjBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KARD,EASCC,OATD,CASS,YAAM;AACbhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXD;AAYD,GAdD;AAeA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEiB,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEtB,UADR;AAEE,IAAA,YAAY,EAAG,sBAAAQ,IAAI;AAAA,aAAIA,IAAI,CAACE,UAAL,CAAgBa,QAAhB,EAAJ;AAAA,KAFrB;AAGE,IAAA,UAAU,EAAE;AAAA,UAAGf,IAAH,QAAGA,IAAH;AAAA,aACV,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACgB,UAAAA,OAAO,EAAE,CAAV;AAAaC,UAAAA,QAAQ,EAAE;AAAvB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0CjB,IAAI,CAACkB,eAA/C,CADJ,CADU;AAAA,KAHd;AAQE,IAAA,8BAA8B,EAAE,KARlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWE,oBAAC,mBAAD,eAAyB5B,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXF,CADF;AAeD;;AACD,SAAQD,aAAR","sourcesContent":["import * as React from 'react';\nimport { Button, View, Text } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { ModalChapterContent } from '../../Components';\n\nfunction ReadingScreen(props) {\n  const [dataSource, setDataSource ]= React.useState([]);\n  const [isLoading, setLoading] = React.useState(true);\n  \n  React.useEffect(() => {\n    // fetch('http://10.0.2.2:5000/')\n    fetch('http://192.168.1.8:19000/chapter_content/' + props.route.params.item.story_id + '/' + props.route.params.chapter_id)\n    .then ((response) => response.json())\n    .then ( (res) => { \n      console.log('kq:' + res); \n      setDataSource(res);\n    })\n    .catch ((error) => {\n      console.log(error);\n    })\n    .finally(() => {\n      setLoading(false) \n    });\n  });\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <FlatList\n        data={dataSource}\n        keyExtractor= {item => item.chapter_id.toString()}\n        renderItem={({ item }) => (\n          <View>         \n              <Text style={{padding: 5, fontSize: 13}}>{item.chapter_content}</Text>\n          </View>\n        )}\n        showsHorizontalScrollIndicator={false}\n      />\n      <ModalChapterContent {...props}/>               \n    </View>\n  );\n}\nexport {ReadingScreen};"]},"metadata":{},"sourceType":"module"}