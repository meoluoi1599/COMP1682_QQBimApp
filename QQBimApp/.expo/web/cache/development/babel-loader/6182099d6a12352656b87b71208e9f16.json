{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\users\\\\ScreemFolder\\\\ListStoryScreen\\\\ListStoryScreen.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { SplashScreen } from \"../../ScreemFolder/OtherScreen\";\nimport { MaterialIcons, FontAwesome } from '@expo/vector-icons';\n\nfunction ListStoryScreen(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      modalVisible = _React$useState6[0],\n      setModalVisible = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      user = _React$useState8[0],\n      setUser = _React$useState8[1];\n\n  var _React$useState9 = React.useState(''),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      value = _React$useState10[0],\n      setValue = _React$useState10[1];\n\n  function get_list(jsonValue) {\n    fetch('http://192.168.0.101:19000/get_list/' + jsonValue.user_id).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      setData(res);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      setLoading(false);\n    });\n  }\n\n  function create_list() {\n    fetch('http://192.168.0.101:19000/create_list', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'user_id': user.user_id,\n        'list_name': value\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      setModalVisible(false);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  var getData = function getData() {\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              AsyncStorage.getItem('user').then(function (value) {\n                var jsonValue = JSON.parse(value);\n                setUser(jsonValue);\n                get_list(jsonValue);\n              });\n            } catch (e) {\n              console.log(e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var deleteList = function deleteList(list_id) {\n    Alert.alert(\"Do you want to delete your list?\", \"If you choose OK, your list will delete forever.\", [{\n      text: \"Cancel\",\n      onPress: function onPress() {\n        return console.log(\"Cancel Pressed\");\n      },\n      style: \"cancel\"\n    }, {\n      text: \"OK\",\n      onPress: function onPress() {\n        fetch('http://192.168.0.101:19000/delete_list/' + user.user_id + '/' + list_id).then(function (response) {\n          return response.json();\n        }).then(function (res) {\n          get_list(user);\n        }).catch(function (error) {\n          console.log(error);\n        }).finally(function () {\n          setLoading(false);\n        });\n      }\n    }], {\n      cancelable: false\n    });\n  };\n\n  function ListEmpty() {\n    return React.createElement(View, {\n      style: style.listContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: {\n        flexDirection: 'row',\n        margin: 10\n      },\n      onPress: function onPress() {\n        return setModalVisible(!modalVisible);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, React.createElement(MaterialIcons, {\n      name: \"note-add\",\n      size: 24,\n      color: \"grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), React.createElement(Text, {\n      style: style.textName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"There aren't lists.\")));\n  }\n\n  ;\n  React.useEffect(function () {\n    getData();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, isLoading ? React.createElement(SplashScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }) : React.createElement(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(item) {\n      return item.list_id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: style.listContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: {\n          flexDirection: 'row',\n          margin: 10,\n          flex: 1\n        },\n        onPress: function onPress() {\n          return props.navigation.navigate('DetailUserList', {\n            item: item\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../Images/list.png\"),\n        style: style.imgList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }\n      }), React.createElement(Text, {\n        style: style.textName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }\n      }, item.list_name)), React.createElement(TouchableOpacity, {\n        style: {\n          margin: 10\n        },\n        onPress: function onPress() {\n          deleteList(item.list_id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, React.createElement(FontAwesome, {\n        name: \"remove\",\n        color: '#c0c0c0',\n        style: {\n          fontSize: 20,\n          marginLeft: 10,\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 19\n        }\n      })));\n    },\n    ListEmptyComponent: ListEmpty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }), React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {\n      setModalVisible(!modalVisible);\n      get_list(user.user_id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: style.centeredView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: style.modalView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 18,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, \"Create New List\"), React.createElement(TextInput, {\n    placeholder: \"Enter name of list\",\n    onChangeText: function onChangeText(text) {\n      return setValue(text);\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      return create_list();\n    },\n    returnKeyType: \"done\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport { ListStoryScreen };\nvar style = StyleSheet.create({\n  imgList: {\n    width: 30,\n    height: 30\n  },\n  listContainer: {\n    marginTop: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    backgroundColor: 'white',\n    borderColor: '#aa4fff',\n    borderBottomWidth: 0.5,\n    flexDirection: 'row'\n  },\n  textName: {\n    fontSize: 18,\n    color: 'grey',\n    marginLeft: 20\n  },\n  centeredView: {\n    flex: 1,\n    marginTop: 22,\n    flexDirection: 'column',\n    justifyContent: \"flex-end\"\n  },\n  modalView: {\n    backgroundColor: \"white\",\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  }\n});","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/users/ScreemFolder/ListStoryScreen/ListStoryScreen.js"],"names":["React","SplashScreen","MaterialIcons","FontAwesome","ListStoryScreen","props","useState","data","setData","isLoading","setLoading","modalVisible","setModalVisible","user","setUser","value","setValue","get_list","jsonValue","fetch","user_id","then","response","json","res","catch","error","console","log","finally","create_list","method","headers","Accept","body","JSON","stringify","getData","AsyncStorage","getItem","parse","e","deleteList","list_id","Alert","alert","text","onPress","style","cancelable","ListEmpty","listContainer","flexDirection","margin","textName","useEffect","flex","backgroundColor","item","toString","navigation","navigate","require","imgList","list_name","fontSize","marginLeft","marginRight","centeredView","modalView","fontWeight","StyleSheet","create","width","height","marginTop","borderColor","borderBottomWidth","color","justifyContent","alignItems","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Text, TouchableOpacity, StyleSheet, AsyncStorage, Modal, Image, TextInput, FlatList, Alert } from 'react-native';\r\nimport {SplashScreen} from '../../ScreemFolder/OtherScreen'\r\nimport { MaterialIcons, FontAwesome } from '@expo/vector-icons'; \r\n\r\nfunction ListStoryScreen(props) {\r\n  const [data, setData] = React.useState([]);\r\n  const [isLoading, setLoading] = React.useState(true);\r\n  const [modalVisible, setModalVisible] = React.useState(false);\r\n  const [user, setUser] = React.useState([]);\r\n  const [value, setValue] = React.useState('');\r\n  \r\n  function get_list(jsonValue) {\r\n    fetch('http://192.168.0.101:19000/get_list/' + jsonValue.user_id)\r\n    .then ((response) => response.json())\r\n    .then ( (res) => { \r\n      setData(res);\r\n    })\r\n    .catch ((error) => {\r\n      console.log(error);\r\n    })\r\n    .finally(() => {\r\n      setLoading(false) \r\n    });\r\n  }\r\n\r\n  function create_list(){\r\n    fetch('http://192.168.0.101:19000/create_list' , {\r\n          method: 'POST',\r\n          headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            'user_id': user.user_id,\r\n            'list_name': value\r\n          })\r\n      })\r\n      .then ((response) => response.json())\r\n      .then ( (res) => { \r\n        setModalVisible(false);\r\n      })\r\n      .catch ((error) => {\r\n        console.log(error);\r\n      })\r\n  }\r\n  const getData = async () => {\r\n    try {\r\n      AsyncStorage.getItem('user').then((value) => {\r\n        const jsonValue = JSON.parse(value);\r\n        setUser(jsonValue);\r\n        get_list(jsonValue);   \r\n      })\r\n    } catch(e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  const deleteList=(list_id)=> {\r\n    Alert.alert(\r\n      \"Do you want to delete your list?\",\r\n      \"If you choose OK, your list will delete forever.\",\r\n      [\r\n        {\r\n          text: \"Cancel\",\r\n          onPress: () => console.log(\"Cancel Pressed\"),\r\n          style: \"cancel\"\r\n        },\r\n        { text: \"OK\", onPress: () => {\r\n          fetch('http://192.168.0.101:19000/delete_list/' + user.user_id + '/' + list_id)\r\n          .then ((response) => response.json())\r\n          .then ( (res) => { \r\n            get_list(user);\r\n          })\r\n          .catch ((error) => {\r\n            console.log(error);\r\n          })\r\n          .finally(() => {\r\n            setLoading(false);\r\n          });\r\n        } }\r\n      ],\r\n      { cancelable: false }\r\n    ); \r\n  }\r\n  function ListEmpty() {\r\n    return (\r\n      //View to show when list is empty\r\n      <View style={style.listContainer}>\r\n        <TouchableOpacity style={{flexDirection: 'row', margin: 10}} onPress={() => setModalVisible(!modalVisible)}>\r\n          <MaterialIcons name=\"note-add\" size={24} color=\"grey\"/>\r\n          <Text style={style.textName}>There aren't lists.</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  };\r\n  React.useEffect(() => {\r\n    getData();\r\n  }, []);\r\n    return (\r\n      <View style={{flex: 1, backgroundColor: 'white'}}>\r\n        {isLoading? <SplashScreen/>: (\r\n          <FlatList\r\n            data={data}\r\n            keyExtractor= {item => item.list_id.toString()}\r\n            renderItem={({ item }) =>(\r\n              <View style={style.listContainer}>\r\n                <TouchableOpacity style={{flexDirection: 'row', margin: 10, flex: 1}} onPress={() =>props.navigation.navigate('DetailUserList', {item: item})}>\r\n                  <Image \r\n                    source={require(\"../../Images/list.png\")}\r\n                    style={style.imgList}\r\n                  />\r\n                  <Text style={style.textName}>{item.list_name}</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity style={{ margin: 10}} onPress={()=> {deleteList(item.list_id);}}>\r\n                  <FontAwesome\r\n                    name=\"remove\"\r\n                    color={'#c0c0c0'}\r\n                    style={{fontSize: 20, marginLeft: 10, marginRight: 10}}\r\n                  />\r\n                </TouchableOpacity>\r\n              </View>\r\n            )}\r\n            ListEmptyComponent={ListEmpty}\r\n          />\r\n        )}\r\n        <Modal\r\n          animationType=\"slide\"\r\n          transparent={true}\r\n          visible={modalVisible}\r\n          onRequestClose={() => {\r\n            setModalVisible(!modalVisible);\r\n            get_list(user.user_id)\r\n          }}\r\n        >\r\n          <View style={style.centeredView}>\r\n            <View style={style.modalView}>\r\n              <Text style={{fontSize: 18, fontWeight: 'bold'}}>Create New List</Text>\r\n              <TextInput placeholder='Enter name of list'\r\n                onChangeText={text => setValue(text)}\r\n                onSubmitEditing={()=> create_list()}\r\n                returnKeyType='done'\r\n              />\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n      </View>\r\n      \r\n    );\r\n}\r\nexport {ListStoryScreen};\r\n\r\nvar style = StyleSheet.create({\r\n  imgList: {\r\n    width: 30, \r\n    height: 30,\r\n  },\r\n  listContainer: {\r\n    marginTop: 5,\r\n    marginLeft: 10,\r\n    marginRight:10,\r\n    backgroundColor: 'white',\r\n    borderColor: '#aa4fff',\r\n    borderBottomWidth: 0.5,\r\n    flexDirection: 'row'\r\n  },\r\n  textName: {\r\n    fontSize: 18, \r\n    color: 'grey',\r\n    marginLeft: 20\r\n  },\r\n  centeredView: {\r\n    flex: 1,\r\n    marginTop: 22,\r\n    flexDirection: 'column',\r\n    justifyContent: \"flex-end\"\r\n  },\r\n  modalView: {\r\n    backgroundColor: \"white\",\r\n    alignItems: \"center\",\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n    //maxheight: Dimensions.get('window').height * 0.3\r\n  },\r\n})"]},"metadata":{},"sourceType":"module"}