{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\users\\\\ScreemFolder\\\\NotificationScreen\\\\NotificationScreen.js\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { SplashScreen } from \"../OtherScreen\";\n\nfunction NotificationScreen() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dataSource = _React$useState2[0],\n      setDataSource = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  var getUserData = function getUserData() {\n    return _regeneratorRuntime.async(function getUserData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              AsyncStorage.getItem('user').then(function (value) {\n                var jsonValue = JSON.parse(value);\n                getNotification(jsonValue);\n              });\n            } catch (e) {\n              console.log(e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getNotification = function getNotification(jsonValue) {\n    fetch('http://192.168.0.102:19000/notification/' + jsonValue.user_id).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      setDataSource(res);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      setLoading(false);\n    });\n  };\n\n  function ListEmpty() {\n    return React.createElement(View, {\n      style: {\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        color: 'black',\n        marginTop: 20,\n        marginBottom: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"You don't have any notification\"));\n  }\n\n  ;\n  React.useEffect(function () {\n    getUserData();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    hidden: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), isLoading ? React.createElement(SplashScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 20\n    }\n  }) : React.createElement(FlatList, {\n    data: dataSource,\n    keyExtractor: function keyExtractor(item) {\n      return item.follow_id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableOpacity, {\n        style: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }\n      }, React.createElement(Image, {\n        style: {\n          width: 60,\n          height: 60,\n          borderRadius: 50\n        },\n        source: {\n          uri: item.user_avatar\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      })), React.createElement(Text, {\n        style: {\n          flex: 3,\n          marginLeft: 5,\n          fontSize: 15\n        },\n        numberOfLines: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 19\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: 'bold',\n          fontSize: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 89\n        }\n      }, item.fullname), \" \", item.notification_content));\n    },\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: ListEmpty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport { NotificationScreen };\nvar styles = StyleSheet.create({\n  content: {\n    flexDirection: 'row',\n    padding: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.18,\n    shadowRadius: 1.00,\n    elevation: 1\n  }\n});","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/users/ScreemFolder/NotificationScreen/NotificationScreen.js"],"names":["React","SplashScreen","NotificationScreen","useState","dataSource","setDataSource","isLoading","setLoading","getUserData","AsyncStorage","getItem","then","value","jsonValue","JSON","parse","getNotification","e","console","log","fetch","user_id","response","json","res","catch","error","finally","ListEmpty","justifyContent","alignItems","fontSize","color","marginTop","marginBottom","useEffect","flex","backgroundColor","item","follow_id","toString","styles","content","width","height","borderRadius","uri","user_avatar","marginLeft","fontWeight","fullname","notification_content","StyleSheet","create","flexDirection","padding","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;AAEA,SAAQC,YAAR;;AACA,SAASC,kBAAT,GAA8B;AAAA,wBACQF,KAAK,CAACG,QAAN,CAAe,EAAf,CADR;AAAA;AAAA,MACrBC,UADqB;AAAA,MACTC,aADS;;AAAA,yBAEIL,KAAK,CAACG,QAAN,CAAe,IAAf,CAFJ;AAAA;AAAA,MAErBG,SAFqB;AAAA,MAEVC,UAFU;;AAI5B,MAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAClB,gBAAI;AACFC,cAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAA7B,CAAkC,UAACC,KAAD,EAAW;AAC3C,oBAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAlB;AACAI,gBAAAA,eAAe,CAACH,SAAD,CAAf;AACD,eAHD;AAID,aALD,CAKE,OAAMI,CAAN,EAAS;AACTC,cAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAUA,MAAMD,eAAe,GAAE,SAAjBA,eAAiB,CAACH,SAAD,EAAc;AACnCO,IAAAA,KAAK,CAAC,6CAA6CP,SAAS,CAACQ,OAAxD,CAAL,CACCV,IADD,CACO,UAACW,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADP,EAECZ,IAFD,CAEQ,UAACa,GAAD,EAAS;AACfnB,MAAAA,aAAa,CAACmB,GAAD,CAAb;AACD,KAJD,EAKCC,KALD,CAKQ,UAACC,KAAD,EAAW;AACjBR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD,KAPD,EAQCC,OARD,CAQS,YAAM;AACbpB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD;AAWD,GAZD;;AAcA,WAASqB,SAAT,GAAqB;AACnB,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,cAAc,EAAE,QAAlB;AAA4BC,QAAAA,UAAU,EAAE;AAAxC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,QAAQ,EAAE,EAAX;AAAeC,QAAAA,KAAK,EAAE,OAAtB;AAA+BC,QAAAA,SAAS,EAAE,EAA1C;AAA8CC,QAAAA,YAAY,EAAE;AAA5D,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADF,CADF;AAKD;;AAAA;AAEDlC,EAAAA,KAAK,CAACmC,SAAN,CAAgB,YAAM;AACpB3B,IAAAA,WAAW;AACZ,GAFD,EAEG,EAFH;AAGA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAE4B,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,eAAe,EAAE;AAA5B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,MAAM,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEG/B,SAAS,GAAG,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACN,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEF,UADR;AAEE,IAAA,YAAY,EAAG,sBAAAkC,IAAI;AAAA,aAAIA,IAAI,CAACC,SAAL,CAAeC,QAAf,EAAJ;AAAA,KAFrB;AAGE,IAAA,UAAU,EAAE;AAAA,UAAGF,IAAH,QAAGA,IAAH;AAAA,aACV,oBAAC,gBAAD;AAAkB,QAAA,KAAK,EAAEG,MAAM,CAACC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACN,UAAAA,IAAI,EAAE;AAAP,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAEO,UAAAA,KAAK,EAAE,EAAT;AAAaC,UAAAA,MAAM,EAAE,EAArB;AAAyBC,UAAAA,YAAY,EAAE;AAAvC,SAAd;AACI,QAAA,MAAM,EAAE;AAACC,UAAAA,GAAG,EAAER,IAAI,CAACS;AAAX,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADJ,EAMI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACX,UAAAA,IAAI,EAAC,CAAN;AAASY,UAAAA,UAAU,EAAE,CAArB;AAAwBjB,UAAAA,QAAQ,EAAE;AAAlC,SAAb;AAAoD,QAAA,aAAa,EAAE,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACkB,UAAAA,UAAU,EAAE,MAAb;AAAqBlB,UAAAA,QAAQ,EAAE;AAA/B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkDO,IAAI,CAACY,QAAvD,CAAtE,OAA+IZ,IAAI,CAACa,oBAApJ,CANJ,CADU;AAAA,KAHd;AAaE,IAAA,8BAA8B,EAAE,KAblC;AAcE,IAAA,kBAAkB,EAAEvB,SAdtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHN,CADF;AAuBD;;AAAC,SAAQ1B,kBAAR;AAEF,IAAMuC,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC7BX,EAAAA,OAAO,EAAE;AACPY,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,OAAO,EAAE,EAFF;AAGPC,IAAAA,WAAW,EAAE,MAHN;AAIPC,IAAAA,YAAY,EAAE;AACZd,MAAAA,KAAK,EAAE,CADK;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAJP;AAQPc,IAAAA,aAAa,EAAE,IARR;AASPC,IAAAA,YAAY,EAAE,IATP;AAUPC,IAAAA,SAAS,EAAE;AAVJ;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, StatusBar, View, Image, Text, FlatList, TouchableOpacity, AsyncStorage } from 'react-native';\r\nimport {SplashScreen} from '../OtherScreen'\r\nfunction NotificationScreen() {\r\n  const [dataSource, setDataSource ]= React.useState([]);\r\n  const [isLoading, setLoading] = React.useState(true);\r\n  \r\n  const getUserData = async () => {\r\n    try {\r\n      AsyncStorage.getItem('user').then((value) => {\r\n        const jsonValue = JSON.parse(value);\r\n        getNotification(jsonValue);\r\n      })\r\n    } catch(e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  const getNotification =(jsonValue)=> {\r\n    fetch('http://192.168.0.102:19000/notification/' + jsonValue.user_id)\r\n    .then ((response) => response.json())\r\n    .then ( (res) => { \r\n      setDataSource(res);\r\n    })\r\n    .catch ((error) => {\r\n      console.log(error);\r\n    })\r\n    .finally(() => {\r\n      setLoading(false) \r\n    });\r\n  }\r\n\r\n  function ListEmpty() {\r\n    return (\r\n      <View style={{ justifyContent: 'center', alignItems: 'center'}}>  \r\n        <Text style={{fontSize: 20, color: 'black', marginTop: 20, marginBottom: 20}}>You don't have any notification</Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getUserData();\r\n  }, []);\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: 'white'}}>\r\n      <StatusBar hidden/>\r\n      {isLoading ? <SplashScreen/> : (\r\n          <FlatList\r\n            data={dataSource}\r\n            keyExtractor= {item => item.follow_id.toString()}\r\n            renderItem={({ item }) => (\r\n              <TouchableOpacity style={styles.content}>\r\n                  <View style={{flex: 1}}>\r\n                    <Image style={{ width: 60, height: 60, borderRadius: 50}}\r\n                        source={{uri: item.user_avatar}} \r\n                    />\r\n                  </View>\r\n                  <Text style={{flex:3, marginLeft: 5, fontSize: 15}} numberOfLines={3}><Text style={{fontWeight: 'bold', fontSize: 15}}>{item.fullname}</Text> {item.notification_content}</Text>\r\n              </TouchableOpacity>\r\n            )}\r\n            showsHorizontalScrollIndicator={false}\r\n            ListEmptyComponent={ListEmpty}\r\n          />    \r\n      )}\r\n    </View>\r\n  )   \r\n} export {NotificationScreen};\r\n \r\nconst styles = StyleSheet.create({\r\n    content: {\r\n      flexDirection: 'row',\r\n      padding: 10,\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 1,\r\n      },\r\n      shadowOpacity: 0.18,\r\n      shadowRadius: 1.00,\r\n      elevation: 1,\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}