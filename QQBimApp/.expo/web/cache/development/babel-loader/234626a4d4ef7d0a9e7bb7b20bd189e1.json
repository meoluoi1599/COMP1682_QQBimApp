{"ast":null,"code":"var _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\node_modules\\\\react-native-cn-richtext-editor\\\\src\\\\CNToolbarIcon.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport var CNToolbarIcon = function CNToolbarIcon(props) {\n  var size = props.size,\n      backgroundColor = props.backgroundColor,\n      color = props.color,\n      iconStyles = props.iconStyles,\n      toolTypeText = props.toolTypeText,\n      iconComponent = props.iconComponent,\n      onStyleKeyPress = props.onStyleKeyPress,\n      selectedColor = props.selectedColor,\n      selectedStyles = props.selectedStyles,\n      selectedTag = props.selectedTag,\n      buttonTypes = props.buttonTypes,\n      selectedBackgroundColor = props.selectedBackgroundColor;\n  var colorCondition = '';\n  var backgroundColorCondition = '';\n\n  if (buttonTypes === 'style') {\n    backgroundColorCondition = selectedStyles.indexOf(toolTypeText) >= 0 ? selectedBackgroundColor : backgroundColor;\n    colorCondition = selectedStyles.indexOf(toolTypeText) >= 0 ? selectedColor : color;\n  } else if (buttonTypes === 'tag') {\n    backgroundColorCondition = selectedTag === toolTypeText ? selectedBackgroundColor : backgroundColor;\n    colorCondition = selectedTag === toolTypeText ? selectedColor : color;\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      onStyleKeyPress(toolTypeText);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: [iconStyles, {\n      backgroundColor: backgroundColorCondition\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, React.cloneElement(iconComponent, {\n    size: size,\n    color: colorCondition,\n    style: [{\n      fontSize: size,\n      color: colorCondition\n    }, iconComponent.props.style || {}]\n  })));\n};","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/node_modules/react-native-cn-richtext-editor/src/CNToolbarIcon.js"],"names":["React","Component","CNToolbarIcon","props","size","backgroundColor","color","iconStyles","toolTypeText","iconComponent","onStyleKeyPress","selectedColor","selectedStyles","selectedTag","buttonTypes","selectedBackgroundColor","colorCondition","backgroundColorCondition","indexOf","cloneElement","style","fontSize"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AASA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,MAEhCC,IAFgC,GAchCD,KAdgC,CAEhCC,IAFgC;AAAA,MAGhCC,eAHgC,GAchCF,KAdgC,CAGhCE,eAHgC;AAAA,MAIhCC,KAJgC,GAchCH,KAdgC,CAIhCG,KAJgC;AAAA,MAKhCC,UALgC,GAchCJ,KAdgC,CAKhCI,UALgC;AAAA,MAMhCC,YANgC,GAchCL,KAdgC,CAMhCK,YANgC;AAAA,MAOhCC,aAPgC,GAchCN,KAdgC,CAOhCM,aAPgC;AAAA,MAQhCC,eARgC,GAchCP,KAdgC,CAQhCO,eARgC;AAAA,MAShCC,aATgC,GAchCR,KAdgC,CAShCQ,aATgC;AAAA,MAUhCC,cAVgC,GAchCT,KAdgC,CAUhCS,cAVgC;AAAA,MAWhCC,WAXgC,GAchCV,KAdgC,CAWhCU,WAXgC;AAAA,MAYhCC,WAZgC,GAchCX,KAdgC,CAYhCW,WAZgC;AAAA,MAahCC,uBAbgC,GAchCZ,KAdgC,CAahCY,uBAbgC;AAepC,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,wBAAwB,GAAG,EAA/B;;AACA,MAAIH,WAAW,KAAK,OAApB,EAA6B;AACzBG,IAAAA,wBAAwB,GAAGL,cAAc,CAACM,OAAf,CAAuBV,YAAvB,KAAwC,CAAxC,GAA4CO,uBAA5C,GAAsEV,eAAjG;AACAW,IAAAA,cAAc,GAAGJ,cAAc,CAACM,OAAf,CAAuBV,YAAvB,KAAwC,CAAxC,GAA4CG,aAA5C,GAA4DL,KAA7E;AACH,GAHD,MAIK,IAAIQ,WAAW,KAAK,KAApB,EAA2B;AAC5BG,IAAAA,wBAAwB,GAAGJ,WAAW,KAAKL,YAAhB,GAA+BO,uBAA/B,GAAyDV,eAApF;AACAW,IAAAA,cAAc,GAAGH,WAAW,KAAKL,YAAhB,GAA+BG,aAA/B,GAA+CL,KAAhE;AACH;;AACD,SACI,oBAAC,wBAAD;AACI,IAAA,OAAO,EAAE,mBAAM;AACXI,MAAAA,eAAe,CAACF,YAAD,CAAf;AACH,KAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACD,UAAD,EACT;AACIF,MAAAA,eAAe,EAAEY;AADrB,KADS,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMOjB,KAAK,CAACmB,YAAN,CAAmBV,aAAnB,EAAkC;AAAEL,IAAAA,IAAI,EAAJA,IAAF;AAASE,IAAAA,KAAK,EAAEU,cAAhB;AAAiCI,IAAAA,KAAK,EAAE,CAAC;AAC1EC,MAAAA,QAAQ,EAAEjB,IADgE;AAE1EE,MAAAA,KAAK,EAAEU;AAFmE,KAAD,EAGvEP,aAAa,CAACN,KAAd,CAAoBiB,KAApB,IAA6B,EAH0C;AAAxC,GAAlC,CANP,CALJ,CADJ;AAoBH,CA7CM","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    View,\r\n    TouchableWithoutFeedback,\r\n    TouchableHighlight,\r\n    Text,\r\n    StyleSheet\r\n} from 'react-native'\r\n\r\nexport const CNToolbarIcon = (props) => {\r\n    const {\r\n        size,\r\n        backgroundColor,\r\n        color,\r\n        iconStyles,\r\n        toolTypeText,\r\n        iconComponent,\r\n        onStyleKeyPress,\r\n        selectedColor,\r\n        selectedStyles,\r\n        selectedTag,\r\n        buttonTypes,\r\n        selectedBackgroundColor,\r\n    } = props    \r\n    let colorCondition = '';\r\n    let backgroundColorCondition = '';\r\n    if (buttonTypes === 'style') {     \r\n        backgroundColorCondition = selectedStyles.indexOf(toolTypeText) >= 0 ? selectedBackgroundColor : backgroundColor;   \r\n        colorCondition = selectedStyles.indexOf(toolTypeText) >= 0 ? selectedColor : color;\r\n    }\r\n    else if (buttonTypes === 'tag') {    \r\n        backgroundColorCondition = selectedTag === toolTypeText ? selectedBackgroundColor : backgroundColor;    \r\n        colorCondition = selectedTag === toolTypeText ? selectedColor : color\r\n    }\r\n    return (\r\n        <TouchableWithoutFeedback\r\n            onPress={() => {\r\n                onStyleKeyPress(toolTypeText)\r\n            }}\r\n        >\r\n            <View style={[iconStyles,\r\n                {\r\n                    backgroundColor: backgroundColorCondition\r\n                }]}\r\n            >\r\n                {\r\n                   React.cloneElement(iconComponent, { size , color: colorCondition , style: [{\r\n                    fontSize: size,\r\n                    color: colorCondition\r\n                   }, iconComponent.props.style || {}] })\r\n                }\r\n            </View>\r\n        </TouchableWithoutFeedback>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}