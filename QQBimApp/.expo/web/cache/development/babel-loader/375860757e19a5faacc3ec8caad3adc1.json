{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\Components\\\\ReadingScreen\\\\ReadingContentComponent.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { SplashScreen } from \"../../ScreemFolder/OtherScreen\";\n\nfunction ReadingContentComponent(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dataSource = _React$useState2[0],\n      setDataSource = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  React.useEffect(function () {\n    fetch('http://192.168.1.2:19000/chapter_content/' + props.route.params.item.story_id + '/' + props.route.params.chapter_id).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      console.log('kq:' + res);\n      setDataSource(res);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      setLoading(false);\n    });\n  });\n\n  function ListEmpty() {\n    return React.createElement(View, {\n      style: style.MainContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: {\n        textAlign: 'center',\n        justifyContent: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"There are no chapter for this story\"));\n  }\n\n  ;\n  console.log(dataSource);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, isLoading ? React.createElement(SplashScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }\n  }) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: dataSource,\n    keyExtractor: function keyExtractor(item) {\n      return item.chapter_id.toString();\n    },\n    showsHorizontalScrollIndicator: false,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: {\n          padding: 20,\n          fontSize: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      }, item.chapter_content));\n    },\n    ListEmptyComponent: ListEmpty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport { ReadingContentComponent };\nvar style = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n    width: Dimensions.get('window').width,\n    marginBottom: 5\n  }\n});","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/Components/ReadingScreen/ReadingContentComponent.js"],"names":["React","SplashScreen","ReadingContentComponent","props","useState","dataSource","setDataSource","isLoading","setLoading","useEffect","fetch","route","params","item","story_id","chapter_id","then","response","json","res","console","log","catch","error","finally","ListEmpty","style","MainContainer","textAlign","justifyContent","toString","padding","fontSize","chapter_content","StyleSheet","create","container","flex","width","Dimensions","get","marginBottom"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;AAQA,SAAQC,YAAR;;AAGA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AAAA,wBACFH,KAAK,CAACI,QAAN,CAAe,EAAf,CADE;AAAA;AAAA,MAC/BC,UAD+B;AAAA,MACnBC,aADmB;;AAAA,yBAENN,KAAK,CAACI,QAAN,CAAe,IAAf,CAFM;AAAA;AAAA,MAE/BG,SAF+B;AAAA,MAEpBC,UAFoB;;AAItCR,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAM;AAEpBC,IAAAA,KAAK,CAAC,8CAA8CP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,IAAnB,CAAwBC,QAAtE,GAAiF,GAAjF,GAAuFX,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBG,UAA3G,CAAL,CACCC,IADD,CACO,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADP,EAECF,IAFD,CAEQ,UAACG,GAAD,EAAS;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,GAApB;AACAb,MAAAA,aAAa,CAACa,GAAD,CAAb;AACD,KALD,EAMCG,KAND,CAMQ,UAACC,KAAD,EAAW;AACjBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,KARD,EASCC,OATD,CASS,YAAM;AACbhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXD;AAYD,GAdD;;AAgBA,WAASiB,SAAT,GAAqB;AACnB,WAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,KAAK,CAACC,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,QAAb;AAAuBC,QAAAA,cAAc,EAAE;AAAvC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADF,CAFF;AAMD;;AAAA;AAEDT,EAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAZ;AACA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,SAAS,GAAE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAF,GACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEF,UADR;AAEE,IAAA,YAAY,EAAG,sBAAAQ,IAAI;AAAA,aAAIA,IAAI,CAACE,UAAL,CAAgBe,QAAhB,EAAJ;AAAA,KAFrB;AAGE,IAAA,8BAA8B,EAAE,KAHlC;AAIE,IAAA,UAAU,EAAE;AAAA,UAAGjB,IAAH,QAAGA,IAAH;AAAA,aACR,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEkB,UAAAA,OAAO,EAAE,EAAX;AAAeC,UAAAA,QAAQ,EAAE;AAAzB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4CnB,IAAI,CAACoB,eAAjD,CADJ,CADQ;AAAA,KAJd;AASE,IAAA,kBAAkB,EAAER,SATtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF;AAoBD;;AACD,SAAQvB,uBAAR;AAEA,IAAIwB,KAAK,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC5BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAC,CADI;AAETN,IAAAA,OAAO,EAAE,EAFA;AAGTO,IAAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAHvB;AAITG,IAAAA,YAAY,EAAE;AAJL;AADiB,CAAlB,CAAZ","sourcesContent":["import * as React from 'react';\r\nimport { \r\n  View, \r\n  Text,\r\n  FlatList, \r\n  StyleSheet, \r\n  Dimensions\r\n} from 'react-native';\r\nimport {SplashScreen} from '../../ScreemFolder/OtherScreen';\r\n\r\n\r\nfunction ReadingContentComponent(props) {\r\n  const [dataSource, setDataSource ]= React.useState([]);\r\n  const [isLoading, setLoading] = React.useState(true);\r\n  \r\n  React.useEffect(() => {\r\n    // fetch('http://10.0.2.2:5000/')\r\n    fetch('http://192.168.1.2:19000/chapter_content/' + props.route.params.item.story_id + '/' + props.route.params.chapter_id)\r\n    .then ((response) => response.json())\r\n    .then ( (res) => { \r\n      console.log('kq:' + res); \r\n      setDataSource(res);\r\n    })\r\n    .catch ((error) => {\r\n      console.log(error);\r\n    })\r\n    .finally(() => {\r\n      setLoading(false) \r\n    });\r\n  });\r\n\r\n  function ListEmpty() {\r\n    return (\r\n      //View to show when list is empty\r\n      <View style={style.MainContainer}>\r\n        <Text style={{ textAlign: 'center', justifyContent: 'center' }}>There are no chapter for this story</Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  console.log(dataSource);\r\n  return (  \r\n    <View>\r\n      {isLoading? <SplashScreen/>:(\r\n        <View>\r\n          <FlatList\r\n            data={dataSource}\r\n            keyExtractor= {item => item.chapter_id.toString()}\r\n            showsHorizontalScrollIndicator={false}\r\n            renderItem={({ item }) => (\r\n                <View>         \r\n                    <Text style={{ padding: 20, fontSize: 15}}>{item.chapter_content}</Text>\r\n                </View>\r\n            )}  \r\n            ListEmptyComponent={ListEmpty}\r\n        /> \r\n        </View>\r\n      )}\r\n    </View>\r\n  )\r\n  \r\n}\r\nexport {ReadingContentComponent}\r\n\r\nvar style = StyleSheet.create({\r\n  container: {\r\n    flex:1, \r\n    padding: 10,\r\n    width: Dimensions.get('window').width, \r\n    marginBottom: 5\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}