{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\users\\\\ScreemFolder\\\\StoryScreen\\\\NewStory.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Dropdown } from 'react-native-material-dropdown-v2';\nimport * as ImagePicker from 'expo-image-picker';\nimport { MaterialIcons } from '@expo/vector-icons';\n\nfunction NewStory(props) {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      title = _React$useState2[0],\n      setTitle = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      description = _React$useState4[0],\n      setDescription = _React$useState4[1];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dataUser = _React$useState6[0],\n      setDataUser = _React$useState6[1];\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      isLoading = _React$useState8[0],\n      setLoading = _React$useState8[1];\n\n  var formdata = new FormData();\n  formdata.append(\"title_story\", title);\n  formdata.append(\"story_description\", description);\n  formdata.append(\"user_id\", dataUser.user_id);\n\n  var getData = function getData() {\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              AsyncStorage.getItem('user').then(function (value) {\n                var jsonValue = JSON.parse(value);\n                setDataUser(jsonValue);\n              });\n            } catch (e) {\n              console.log(e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var pickImage = function pickImage() {\n    return _regeneratorRuntime.async(function pickImage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            (function _callee() {\n              var _await$ImagePicker$re, status, result;\n\n              return _regeneratorRuntime.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      if (!(Platform.OS !== 'web')) {\n                        _context2.next = 14;\n                        break;\n                      }\n\n                      _context2.next = 3;\n                      return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n                    case 3:\n                      _await$ImagePicker$re = _context2.sent;\n                      status = _await$ImagePicker$re.status;\n\n                      if (!(status !== 'granted')) {\n                        _context2.next = 9;\n                        break;\n                      }\n\n                      alert('Sorry, we need camera roll permissions to make this work!');\n                      _context2.next = 14;\n                      break;\n\n                    case 9:\n                      _context2.next = 11;\n                      return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n                        mediaTypes: ImagePicker.MediaTypeOptions.All,\n                        allowsEditing: true,\n                        aspect: [4, 6],\n                        quality: 1\n                      }));\n\n                    case 11:\n                      result = _context2.sent;\n                      console.log(result);\n\n                      if (!result.cancelled) {\n                        formdata.append(\"file\", {\n                          name: 'quyendog.jpg',\n                          uri: result.uri,\n                          type: 'image/jpeg'\n                        });\n                        setImage(result.uri);\n                      }\n\n                    case 14:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            })();\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var addNewNotification = function addNewNotification() {\n    fetch('http://192.168.0.101:19000/newNotification', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'user_id': dataUser.user_id,\n        'content': 'Add new story: ' + title\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      console.log('susses');\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  React.useEffect(function () {\n    props.navigation.dangerouslyGetParent().setOptions({\n      tabBarVisible: false\n    });\n    getData();\n  }, []);\n\n  var upload_story = function upload_story() {\n    if (title.length == 0 || description.length == 0) {\n      alert('Title and description is not empty');\n    } else {\n      formdata.append(\"file\", {\n        name: 'quyendog.jpg',\n        uri: image,\n        type: 'image/jpeg'\n      });\n      fetch('http://192.168.0.101:19000/create_story', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        body: formdata\n      }).then(function (response) {\n        return response.json();\n      }).then(function (res) {\n        Alert.alert(\"Your story created\", \"Do you want to access your story list to create new chapter\", [{\n          text: \"Cancel\",\n          onPress: function onPress() {\n            return console.log(\"Cancel Pressed\");\n          },\n          style: \"cancel\"\n        }, {\n          text: \"OK\",\n          onPress: function onPress() {\n            return props.navigation.navigate('YourStory');\n          }\n        }], {\n          cancelable: false\n        });\n        addNewNotification();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  };\n\n  return React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Sellect story image:\"), React.createElement(TouchableOpacity, {\n    style: {\n      alignItems: \"center\"\n    },\n    onPress: pickImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      width: '100%',\n      marginTop: 10,\n      height: 200,\n      alignItems: \"center\",\n      justifyContent: 'center',\n      opacity: 0.5,\n      borderWidth: 1,\n      borderColor: 'grey'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 27\n    }\n  }))), React.createElement(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, \"Story title:\"), React.createElement(TextInput, {\n    style: {\n      height: 40,\n      backgroundColor: 'white'\n    },\n    onChangeText: function onChangeText(text) {\n      return setTitle(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      marginTop: 10,\n      fontSize: 16,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, \"Story description:\"), React.createElement(View, {\n    style: {\n      marginTop: 10,\n      backgroundColor: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    textAlignVertical: 'top',\n    multiline: true,\n    placeholder: \"Description for your story\",\n    numberOfLines: 20,\n    scrollEnabled: true,\n    onChangeText: function onChangeText(text) {\n      return setDescription(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: styles.upload,\n    onPress: function onPress() {\n      upload_story();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 86\n    }\n  }, \"Upload your story\"))));\n}\n\nexport { NewStory };\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1,\n    marginRight: 30,\n    marginLeft: 30,\n    paddingBottom: 1,\n    alignItems: 'stretch'\n  },\n  upload: {\n    marginTop: 20,\n    paddingTop: 15,\n    paddingBottom: 15,\n    backgroundColor: '#aa4fff',\n    borderRadius: 50,\n    borderWidth: 1,\n    borderColor: '#fff'\n  },\n  imgEmptyStory: {\n    marginTop: 5,\n    width: Dimensions.get('window').width,\n    height: 100,\n    backgroundColor: 'red'\n  }\n});","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/users/ScreemFolder/StoryScreen/NewStory.js"],"names":["React","useState","useEffect","Dropdown","ImagePicker","MaterialIcons","NewStory","props","title","setTitle","description","setDescription","image","setImage","dataUser","setDataUser","isLoading","setLoading","formdata","FormData","append","user_id","getData","AsyncStorage","getItem","then","value","jsonValue","JSON","parse","e","console","log","pickImage","Platform","OS","requestCameraRollPermissionsAsync","status","alert","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","name","uri","type","addNewNotification","fetch","method","headers","Accept","body","stringify","response","json","res","catch","error","navigation","dangerouslyGetParent","setOptions","tabBarVisible","upload_story","length","Alert","text","onPress","style","navigate","cancelable","styles","main","fontSize","fontWeight","alignItems","backgroundColor","width","marginTop","height","justifyContent","opacity","borderWidth","borderColor","upload","textAlign","color","StyleSheet","create","flex","marginRight","marginLeft","paddingBottom","paddingTop","borderRadius","imgEmptyStory","Dimensions","get"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    View, \n    StyleSheet, \n    Text, \n    ScrollView,\n    TextInput,\n    TouchableOpacity,\n    Alert,\n    Platform,\n    Image,\n    AsyncStorage,\n    Dimensions\n} from 'react-native';\nimport { Dropdown } from 'react-native-material-dropdown-v2';\nimport * as ImagePicker from 'expo-image-picker';\nimport { MaterialIcons } from '@expo/vector-icons'; \n\nfunction NewStory (props){\n    const [title, setTitle] = React.useState('');\n    const [description, setDescription] = React.useState('');\n    const [image, setImage] = useState(null);\n    const [dataUser, setDataUser ]= React.useState([]);\n    const [isLoading, setLoading] = React.useState(true);\n\n    let formdata = new FormData();\n\n    formdata.append(\"title_story\", title)\n    formdata.append(\"story_description\", description)\n    formdata.append(\"user_id\", dataUser.user_id)\n    \n    const getData = async () => {\n      try {\n        AsyncStorage.getItem('user').then((value) => {\n          const jsonValue = JSON.parse(value);\n          setDataUser(jsonValue);\n        })\n      } catch(e) {\n        console.log(e)\n      }\n    }\n    const pickImage = async () => {\n      (async () => {\n        if (Platform.OS !== 'web') {\n          const { status } = await ImagePicker.requestCameraRollPermissionsAsync();\n          if (status !== 'granted') {\n            alert('Sorry, we need camera roll permissions to make this work!');\n          } else {\n            let result = await ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 6],\n              quality: 1,\n            });\n        \n            console.log(result);\n        \n            if (!result.cancelled) {\n              formdata.append(\"file\", {name: 'quyendog.jpg' ,uri: result.uri, type:'image/jpeg'})\n              setImage(result.uri);\n            }\n          }\n        }\n      })();   \n    };\n    const addNewNotification = () => {\n      fetch('http://192.168.0.101:19000/newNotification', {\n          method: 'POST',\n          headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n              'user_id': dataUser.user_id,\n              'content': 'Add new story: '+ title,\n          })\n      })\n      .then ((response) => response.json())\n      .then ( (res) => { \n          console.log('susses')\n      })\n      .catch ((error) => {\n          console.log(error);\n      })\n    }\n\n    React.useEffect(() => {\n        props.navigation.dangerouslyGetParent().setOptions({\n            tabBarVisible: false\n        });\n        getData();\n    }, []);\n\n    const upload_story = () => {\n      if (title.length == 0 || description.length == 0) {\n        alert('Title and description is not empty');\n      }else{\n        formdata.append(\"file\", {name: 'quyendog.jpg' ,uri: image, type:'image/jpeg'})\n\n        fetch('http://192.168.0.101:19000/create_story' , {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n          body: formdata\n      })\n      .then ((response) => response.json())\n      .then ( (res) => { \n        Alert.alert(\n          \"Your story created\",\n          \"Do you want to access your story list to create new chapter\",\n          [\n            {\n              text: \"Cancel\",\n              onPress: () => console.log(\"Cancel Pressed\"),\n              style: \"cancel\"\n            },\n            { text: \"OK\", onPress: () => props.navigation.navigate('YourStory') }\n          ],\n          { cancelable: false }\n        ); \n        addNewNotification();\n      })\n      .catch ((error) => {\n        console.log(error);\n      })\n      }\n    }\n    return (               \n        <ScrollView> \n          <View style={styles.main}>\n            <Text style={{  fontSize: 16, fontWeight: 'bold'}}>Sellect story image:</Text>\n            <TouchableOpacity style={{alignItems: \"center\"}}  onPress={pickImage}>\n              <View style={{\n                  backgroundColor: 'white', \n                  width: '100%',\n                  marginTop: 10, \n                  height: 200,\n                  alignItems: \"center\",\n                  justifyContent: 'center',\n                  opacity: 0.5,\n                  borderWidth: 1,\n                  borderColor: 'grey'\n              }}>\n                {image && <Image source={{ uri: image }} style={{  width: '100%', height: '100%' }} />}\n              </View>\n            </TouchableOpacity>\n            \n            <Text style={{  fontSize: 16, fontWeight: 'bold'}}>Story title:</Text>\n            <TextInput\n            style={{ height: 40, backgroundColor: 'white' }}\n                onChangeText={text => setTitle(text)}\n            />\n            <Text style={{ marginTop: 10, fontSize: 16, fontWeight: 'bold'}}>Story description:</Text>  \n            <View  style={{ marginTop: 10, backgroundColor: 'white'}} >\n                <TextInput \n                  textAlignVertical={'top'}\n                  multiline \n                  placeholder=\"Description for your story\" \n                  numberOfLines={20}\n                  scrollEnabled={true} \n                  onChangeText={text => setDescription(text)} \n                />\n            </View>\n            \n            <TouchableOpacity style={styles.upload} onPress={()=> {upload_story();}}><Text style={{textAlign: 'center', color: 'white'}}>Upload your story</Text></TouchableOpacity>\n          </View>\n        </ScrollView>\n    );\n}\nexport {NewStory};\n\n\nvar styles = StyleSheet.create({\n    main: {\n        flex: 1,\n        marginRight: 30,\n        marginLeft: 30,\n        paddingBottom: 1,\n        alignItems: 'stretch',\n    },\n    upload:{\n        marginTop: 20,\n        paddingTop: 15,\n        paddingBottom: 15,\n        backgroundColor:'#aa4fff',\n        borderRadius: 50,\n        borderWidth: 1,\n        borderColor: '#fff'\n    },\n    imgEmptyStory: {\n      marginTop: 5,\n      width: Dimensions.get('window').width, \n      height: 100, \n      backgroundColor: 'red',\n    }\n});\n\n\n"]},"metadata":{},"sourceType":"module"}