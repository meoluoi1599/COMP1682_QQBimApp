{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\node_modules\\\\react-native-cn-richtext-editor\\\\src\\\\CNToolbar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { CNSeperator } from \"./CNSeperator\";\nimport { CNToolbarIcon } from \"./CNToolbarIcon\";\nimport { CNToolbarSetIcon } from \"./CNToolbarSetIcon\";\nvar defaultColor = '#737373';\nvar defaultBgColor = '#fff';\nvar defaultSelectedColor = '#2a2a2a';\nvar defaultSelectedBgColor = '#e4e4e4';\nvar defaultSize = 16;\n\nvar CNToolbar = function (_Component) {\n  _inherits(CNToolbar, _Component);\n\n  var _super = _createSuper(CNToolbar);\n\n  function CNToolbar(props) {\n    var _this;\n\n    _classCallCheck(this, CNToolbar);\n\n    _this = _super.call(this, props);\n\n    _this.onStyleKeyPress = function (toolItem) {\n      if (_this.props.onStyleKeyPress) _this.props.onStyleKeyPress(toolItem);\n    };\n\n    return _this;\n  }\n\n  _createClass(CNToolbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.iconSet) console.warn('CNToolbar requires `iconSet` prop to display icons (>= 1.0.41). Please check documentation on github.');\n\n      if (this.props.bold || this.props.italic || this.props.underline || this.props.lineThrough || this.props.body || this.props.title || this.props.heading || this.props.ul || this.props.ol || this.props.image || this.props.highlight || this.props.foreColor) {\n        console.warn('CNToolbar: using `bold`, `italic`, `underline`, `lineThrough`, `body`, `title`, `heading`, `ul`, `ol`, `image`, `highlight` or `foreColor` is deprecated. You may use `iconSet` prop instead (>= 1.0.41)');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          selectedStyles = _this$props.selectedStyles,\n          selectedTag = _this$props.selectedTag,\n          size = _this$props.size,\n          style = _this$props.style,\n          color = _this$props.color,\n          backgroundColor = _this$props.backgroundColor,\n          selectedColor = _this$props.selectedColor,\n          selectedBackgroundColor = _this$props.selectedBackgroundColor,\n          _this$props$iconSet = _this$props.iconSet,\n          iconSet = _this$props$iconSet === void 0 ? [] : _this$props$iconSet,\n          iconContainerStyle = _this$props.iconContainerStyle,\n          iconSetContainerStyle = _this$props.iconSetContainerStyle;\n      return React.createElement(View, {\n        style: [styles.toolbarContainer, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, iconSet.map(function (object, index) {\n        return object.type !== 'seperator' && object.iconArray && object.iconArray.length > 0 ? React.createElement(CNToolbarSetIcon, {\n          key: index,\n          size: size ? size : defaultSize,\n          color: color ? color : defaultColor,\n          backgroundColor: backgroundColor ? backgroundColor : defaultBgColor,\n          selectedStyles: selectedStyles,\n          selectedTag: selectedTag,\n          selectedColor: selectedColor ? selectedColor : defaultSelectedColor,\n          selectedBackgroundColor: selectedBackgroundColor ? selectedBackgroundColor : defaultSelectedBgColor,\n          iconArray: object.iconArray,\n          iconSetContainerStyle: [styles.iconSetContainer, iconSetContainerStyle],\n          iconStyles: [styles.iconContainer, iconContainerStyle],\n          onStyleKeyPress: _this2.onStyleKeyPress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }\n        }) : React.createElement(CNSeperator, {\n          key: index,\n          color: color || defaultColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }\n        });\n      }));\n    }\n  }]);\n\n  return CNToolbar;\n}(Component);\n\nvar styles = StyleSheet.create({\n  icon: {\n    top: 2\n  },\n  iconContainer: {\n    borderRadius: 3,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  iconSetContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 3,\n    paddingRight: 3,\n    marginRight: 1\n  },\n  toolbarContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    borderWidth: 1,\n    borderColor: defaultSelectedBgColor,\n    borderRadius: 4,\n    padding: 2,\n    backgroundColor: '#fff'\n  },\n  separator: {\n    width: 2,\n    marginTop: 1,\n    marginBottom: 1,\n    backgroundColor: defaultSelectedBgColor\n  }\n});\nexport default CNToolbar;","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/node_modules/react-native-cn-richtext-editor/src/CNToolbar.js"],"names":["React","Component","CNSeperator","CNToolbarIcon","CNToolbarSetIcon","defaultColor","defaultBgColor","defaultSelectedColor","defaultSelectedBgColor","defaultSize","CNToolbar","props","onStyleKeyPress","toolItem","iconSet","console","warn","bold","italic","underline","lineThrough","body","title","heading","ul","ol","image","highlight","foreColor","selectedStyles","selectedTag","size","style","color","backgroundColor","selectedColor","selectedBackgroundColor","iconContainerStyle","iconSetContainerStyle","styles","toolbarContainer","map","object","index","type","iconArray","length","iconSetContainer","iconContainer","StyleSheet","create","icon","top","borderRadius","alignItems","justifyContent","flexDirection","paddingTop","paddingBottom","paddingLeft","paddingRight","marginRight","borderWidth","borderColor","padding","separator","width","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    View,\r\n    TouchableWithoutFeedback,\r\n    TouchableHighlight,\r\n    Text,\r\n    StyleSheet\r\n} from 'react-native'\r\n\r\nimport { CNSeperator } from './CNSeperator'\r\nimport { CNToolbarIcon } from './CNToolbarIcon'\r\nimport { CNToolbarSetIcon } from './CNToolbarSetIcon'\r\nconst defaultColor = '#737373'\r\nconst defaultBgColor = '#fff'\r\nconst defaultSelectedColor = '#2a2a2a'\r\nconst defaultSelectedBgColor = '#e4e4e4'\r\nconst defaultSize = 16;\r\n\r\nclass CNToolbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!this.props.iconSet)\r\n            console.warn('CNToolbar requires `iconSet` prop to display icons (>= 1.0.41). Please check documentation on github.')\r\n        if(this.props.bold \r\n            || this.props.italic \r\n            || this.props.underline\r\n            || this.props.lineThrough\r\n            || this.props.body\r\n            || this.props.title\r\n            || this.props.heading\r\n            || this.props.ul\r\n            || this.props.ol\r\n            || this.props.image\r\n            || this.props.highlight\r\n            || this.props.foreColor\r\n            ) {\r\n                console.warn('CNToolbar: using `bold`, `italic`, `underline`, `lineThrough`, `body`, `title`, `heading`, `ul`, `ol`, `image`, `highlight` or `foreColor` is deprecated. You may use `iconSet` prop instead (>= 1.0.41)')\r\n            }\r\n        }\r\n\r\n    onStyleKeyPress = (toolItem) => {\r\n        if (this.props.onStyleKeyPress) this.props.onStyleKeyPress(toolItem);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            selectedStyles,\r\n            selectedTag,\r\n            size,\r\n            style,\r\n            color,\r\n            backgroundColor,\r\n            selectedColor,\r\n            selectedBackgroundColor,\r\n            iconSet = [],\r\n            iconContainerStyle,\r\n            iconSetContainerStyle,\r\n        } = this.props;\r\n\r\n        return (\r\n            <View style={[styles.toolbarContainer, style]}>\r\n                {iconSet.map((object, index) => {\r\n                    return (\r\n                        object.type !== 'seperator' &&\r\n                            object.iconArray &&\r\n                            object.iconArray.length > 0 ?\r\n                            <CNToolbarSetIcon\r\n                                key={index}\r\n                                size={size ? size : defaultSize}\r\n                                color={color ? color : defaultColor}\r\n                                backgroundColor={backgroundColor ? backgroundColor : defaultBgColor}\r\n                                selectedStyles={selectedStyles}\r\n                                selectedTag={selectedTag}\r\n                                selectedColor={selectedColor ? selectedColor : defaultSelectedColor}\r\n                                selectedBackgroundColor={selectedBackgroundColor ? selectedBackgroundColor : defaultSelectedBgColor}\r\n                                iconArray={object.iconArray}\r\n                                iconSetContainerStyle={[styles.iconSetContainer, iconSetContainerStyle]}\r\n                                iconStyles={[styles.iconContainer, iconContainerStyle]}\r\n                                onStyleKeyPress={this.onStyleKeyPress}\r\n                            /> :\r\n                            <CNSeperator\r\n                                key={index}\r\n                            color={color || defaultColor}\r\n                            />\r\n                    )\r\n                })}\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    icon: {\r\n        top: 2,\r\n    },\r\n    iconContainer: {\r\n        borderRadius: 3,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    iconSetContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        paddingTop: 2,\r\n        paddingBottom: 2,\r\n        paddingLeft: 3,\r\n        paddingRight: 3,\r\n        marginRight: 1,\r\n    },\r\n    toolbarContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        borderWidth: 1,\r\n        borderColor: defaultSelectedBgColor,\r\n        borderRadius: 4,\r\n        padding: 2,\r\n        backgroundColor: '#fff',\r\n    },\r\n    separator: {\r\n        width: 2,\r\n        marginTop: 1,\r\n        marginBottom: 1,\r\n        backgroundColor: defaultSelectedBgColor,\r\n    },\r\n});\r\n\r\nexport default CNToolbar;\r\n"]},"metadata":{},"sourceType":"module"}