{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\ScreemFolder\\\\StoryScreen\\\\NewPart.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport CNRichTextEditor, { CNToolbar, getInitialObject, getDefaultStyles } from \"react-native-cn-richtext-editor\";\nvar defaultStyles = getDefaultStyles();\n\nvar NewPart = function (_Component) {\n  _inherits(NewPart, _Component);\n\n  var _super = _createSuper(NewPart);\n\n  function NewPart(props) {\n    var _this;\n\n    _classCallCheck(this, NewPart);\n\n    _this = _super.call(this, props);\n\n    _this.onStyleKeyPress = function (toolType) {\n      _this.editor.applyToolbar(toolType);\n    };\n\n    _this.onSelectedTagChanged = function (tag) {\n      _this.setState({\n        selectedTag: tag\n      });\n    };\n\n    _this.onSelectedStyleChanged = function (styles) {\n      _this.setState({\n        selectedStyles: styles\n      });\n    };\n\n    _this.onValueChanged = function (value) {\n      _this.setState({\n        value: value\n      });\n    };\n\n    _this.state = {\n      selectedTag: 'body',\n      selectedStyles: [],\n      value: [getInitialObject()]\n    };\n    _this.editor = null;\n    return _this;\n  }\n\n  _createClass(NewPart, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(KeyboardAvoidingView, {\n        style: {\n          flex: 1,\n          paddingTop: 20,\n          backgroundColor: '#eee',\n          flexDirection: 'column',\n          justifyContent: 'flex-end'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: Keyboard.dismiss,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: styles.main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }, React.createElement(CNRichTextEditor, {\n        ref: function ref(input) {\n          return _this2.editor = input;\n        },\n        onSelectedTagChanged: this.onSelectedTagChanged,\n        onSelectedStyleChanged: this.onSelectedStyleChanged,\n        value: this.state.value,\n        style: {\n          backgroundColor: '#fff'\n        },\n        styleList: defaultStyles,\n        onValueChanged: this.onValueChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      }))), React.createElement(View, {\n        style: {\n          minHeight: 35\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }, React.createElement(CNToolbar, {\n        style: {\n          height: 35\n        },\n        iconSetContainerStyle: {\n          flexGrow: 1,\n          justifyContent: 'space-evenly',\n          alignItems: 'center'\n        },\n        size: 30,\n        iconSet: [{\n          type: 'tool',\n          iconArray: [{\n            toolTypeText: 'image',\n            iconComponent: React.createElement(Text, {\n              style: styles.toolbarButton,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 49\n              }\n            }, \"image\")\n          }]\n        }, {\n          type: 'tool',\n          iconArray: [{\n            toolTypeText: 'bold',\n            buttonTypes: 'style',\n            iconComponent: React.createElement(Text, {\n              style: styles.toolbarButton,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 49\n              }\n            }, \"bold\")\n          }]\n        }, {\n          type: 'seperator'\n        }, {\n          type: 'tool',\n          iconArray: [{\n            toolTypeText: 'body',\n            buttonTypes: 'tag',\n            iconComponent: React.createElement(Text, {\n              style: styles.toolbarButton,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 53\n              }\n            }, \"body\")\n          }]\n        }, {\n          type: 'tool',\n          iconArray: [{\n            toolTypeText: 'ul',\n            buttonTypes: 'tag',\n            iconComponent: React.createElement(Text, {\n              style: styles.toolbarButton,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 53\n              }\n            }, \"ul\")\n          }]\n        }, {\n          type: 'tool',\n          iconArray: [{\n            toolTypeText: 'ol',\n            buttonTypes: 'tag',\n            iconComponent: React.createElement(Text, {\n              style: styles.toolbarButton,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 53\n              }\n            }, \"ol\")\n          }]\n        }],\n        selectedTag: this.state.selectedTag,\n        selectedStyles: this.state.selectedStyles,\n        onStyleKeyPress: this.onStyleKeyPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return NewPart;\n}(Component);\n\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1,\n    marginTop: 10,\n    paddingLeft: 30,\n    paddingRight: 30,\n    paddingBottom: 1,\n    alignItems: 'stretch'\n  },\n  toolbarButton: {\n    fontSize: 20,\n    width: 28,\n    height: 28,\n    textAlign: 'center'\n  },\n  italicButton: {\n    fontStyle: 'italic'\n  },\n  boldButton: {\n    fontWeight: 'bold'\n  },\n  underlineButton: {\n    textDecorationLine: 'underline'\n  },\n  lineThroughButton: {\n    textDecorationLine: 'line-through'\n  }\n});\nexport { NewPart };","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/ScreemFolder/StoryScreen/NewPart.js"],"names":["React","Component","CNRichTextEditor","CNToolbar","getInitialObject","getDefaultStyles","defaultStyles","NewPart","props","onStyleKeyPress","toolType","editor","applyToolbar","onSelectedTagChanged","tag","setState","selectedTag","onSelectedStyleChanged","styles","selectedStyles","onValueChanged","value","state","flex","paddingTop","backgroundColor","flexDirection","justifyContent","Keyboard","dismiss","main","input","minHeight","height","flexGrow","alignItems","type","iconArray","toolTypeText","iconComponent","toolbarButton","buttonTypes","StyleSheet","create","marginTop","paddingLeft","paddingRight","paddingBottom","fontSize","width","textAlign","italicButton","fontStyle","boldButton","fontWeight","underlineButton","textDecorationLine","lineThroughButton"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { \r\n    View, \r\n    StyleSheet, \r\n    Keyboard, \r\n    TouchableWithoutFeedback, \r\n    Text, \r\n    KeyboardAvoidingView \r\n} from 'react-native';\r\n\r\nimport  CNRichTextEditor , { CNToolbar, getInitialObject , getDefaultStyles } from \"react-native-cn-richtext-editor\";\r\n\r\nconst defaultStyles = getDefaultStyles();\r\n\r\nclass NewPart extends Component {\r\n \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            selectedTag : 'body',\r\n            selectedStyles : [],\r\n            value: [getInitialObject()]\r\n        };\r\n\r\n        this.editor = null;\r\n    }\r\n\r\n    onStyleKeyPress = (toolType) => {\r\n        this.editor.applyToolbar(toolType);\r\n    }\r\n\r\n    onSelectedTagChanged = (tag) => {\r\n        this.setState({\r\n            selectedTag: tag\r\n        })\r\n    }\r\n\r\n    onSelectedStyleChanged = (styles) => { \r\n        this.setState({\r\n            selectedStyles: styles,\r\n        })\r\n    }\r\n\r\n    onValueChanged = (value) => {\r\n        this.setState({\r\n            value: value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <KeyboardAvoidingView \r\n            style={{\r\n                flex: 1,\r\n                paddingTop: 20,\r\n                backgroundColor:'#eee',\r\n                flexDirection: 'column', \r\n                justifyContent: 'flex-end', \r\n            }}\r\n            >\r\n                <TouchableWithoutFeedback onPress={Keyboard.dismiss} >             \r\n                    <View style={styles.main}>\r\n                        <CNRichTextEditor                   \r\n                            ref={input => this.editor = input}\r\n                            onSelectedTagChanged={this.onSelectedTagChanged}\r\n                            onSelectedStyleChanged={this.onSelectedStyleChanged}\r\n                            value={this.state.value}\r\n                            style={{ backgroundColor : '#fff'}}\r\n                            styleList={defaultStyles}\r\n                            onValueChanged={this.onValueChanged}\r\n                        />                        \r\n                    </View>\r\n                </TouchableWithoutFeedback>\r\n\r\n                <View style={{\r\n                    minHeight: 35\r\n                }}>\r\n\r\n                    <CNToolbar\r\n                                style={{\r\n                                    height: 35,\r\n                                }}\r\n                                iconSetContainerStyle={{\r\n                                    flexGrow: 1,\r\n                                    justifyContent: 'space-evenly',\r\n                                    alignItems: 'center',\r\n                                }}\r\n                                size={30}\r\n                                iconSet={[\r\n                                    {\r\n                                        type: 'tool',\r\n                                        iconArray: [{\r\n                                            toolTypeText: 'image',\r\n                                            iconComponent:\r\n                                                <Text style={styles.toolbarButton}>\r\n                                                image\r\n                                                </Text>\r\n                                        }]\r\n                                    },\r\n                                    {\r\n                                        type: 'tool',\r\n                                        iconArray: [{\r\n                                            toolTypeText: 'bold',\r\n                                            buttonTypes: 'style',\r\n                                            iconComponent:\r\n                                                <Text style={styles.toolbarButton}>\r\n                                                bold\r\n                                                </Text>\r\n                                        }]\r\n                                    },\r\n                                    {\r\n                                        type: 'seperator'\r\n                                    },\r\n                                    {\r\n                                        type: 'tool',\r\n                                        iconArray: [\r\n                                            {\r\n                                                toolTypeText: 'body',\r\n                                                buttonTypes: 'tag',\r\n                                                iconComponent:\r\n                                                    <Text style={styles.toolbarButton}>\r\n                                                    body\r\n                                                    </Text>\r\n                                            },\r\n                                        ]\r\n                                    },\r\n                                    {\r\n                                        type: 'tool',\r\n                                        iconArray: [\r\n                                            {\r\n                                                toolTypeText: 'ul',\r\n                                                buttonTypes: 'tag',\r\n                                                iconComponent:\r\n                                                    <Text style={styles.toolbarButton}>\r\n                                                    ul\r\n                                                    </Text>\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                    {\r\n                                        type: 'tool',\r\n                                        iconArray: [\r\n                                            {\r\n                                                toolTypeText: 'ol',\r\n                                                buttonTypes: 'tag',\r\n                                                iconComponent:\r\n                                                    <Text style={styles.toolbarButton}>\r\n                                                    ol\r\n                                                    </Text>\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                ]}\r\n                                selectedTag={this.state.selectedTag}\r\n                                selectedStyles={this.state.selectedStyles}\r\n                                onStyleKeyPress={this.onStyleKeyPress}\r\n                            />\r\n                </View>\r\n        </KeyboardAvoidingView>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nvar styles = StyleSheet.create({\r\n    main: {\r\n        flex: 1,\r\n        marginTop: 10,\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingBottom: 1,\r\n        alignItems: 'stretch',\r\n    },\r\n    toolbarButton: {\r\n        fontSize: 20,\r\n        width: 28,\r\n        height: 28,\r\n        textAlign: 'center'\r\n    },\r\n    italicButton: {\r\n        fontStyle: 'italic'\r\n    },\r\n    boldButton: {\r\n        fontWeight: 'bold'\r\n    },\r\n    underlineButton: {\r\n        textDecorationLine: 'underline'\r\n    },\r\n    lineThroughButton: {\r\n        textDecorationLine: 'line-through'\r\n    },\r\n});\r\n\r\n\r\nexport {NewPart};"]},"metadata":{},"sourceType":"module"}