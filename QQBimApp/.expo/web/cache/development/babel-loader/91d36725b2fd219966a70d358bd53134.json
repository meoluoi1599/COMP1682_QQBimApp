{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\users\\\\ScreemFolder\\\\NotificationScreen\\\\ListUserChatScreen.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { SplashScreen } from \"../OtherScreen\";\n\nfunction ListUserChatScreen(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      chatList = _React$useState2[0],\n      setChatList = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  React.useEffect(function () {\n    getData();\n  }, []);\n\n  var getData = function getData() {\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              AsyncStorage.getItem('user').then(function (value) {\n                var jsonValue = JSON.parse(value);\n                getChatList(jsonValue);\n              });\n            } catch (e) {\n              console.log(e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getChatList = function getChatList(jsonValue) {\n    fetch('http://192.168.0.101:19000/get_chat_list/' + jsonValue.user_id).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      console.log(res);\n      setChatList(res);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      setLoading(false);\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, isLoading ? React.createElement(SplashScreen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 23\n    }\n  }) : React.createElement(FlatList, {\n    data: chatList,\n    keyExtractor: function keyExtractor(item) {\n      return item.contact_id.toString();\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: {\n          flexDirection: 'row',\n          margin: 10\n        },\n        onPress: function onPress() {\n          return props.navigation.navigate('Comunication', {\n            item: item\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        style: styles.img,\n        source: {\n          uri: item.user_avatar\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 19\n        }\n      }), React.createElement(Text, {\n        style: styles.textName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }\n      }, item.fullname)));\n    },\n    showsHorizontalScrollIndicator: false,\n    ListEmptyComponent: ListEmpty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }));\n\n  function ListEmpty() {\n    return React.createElement(View, {\n      style: {\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: 'bold'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"You don't communicate with anyone!!\"));\n  }\n}\n\nexport { ListUserChatScreen };\nvar styles = StyleSheet.create({\n  container: {\n    margin: 10,\n    backgroundColor: 'white',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  img: {\n    width: 80,\n    height: 80,\n    borderRadius: 50\n  },\n  textName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginLeft: 20\n  }\n});","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/users/ScreemFolder/NotificationScreen/ListUserChatScreen.js"],"names":["React","SplashScreen","ListUserChatScreen","props","useState","chatList","setChatList","isLoading","setLoading","useEffect","getData","AsyncStorage","getItem","then","value","jsonValue","JSON","parse","getChatList","e","console","log","fetch","user_id","response","json","res","catch","error","finally","flex","item","contact_id","toString","styles","container","flexDirection","margin","navigation","navigate","img","uri","user_avatar","textName","fullname","ListEmpty","justifyContent","alignItems","fontSize","fontWeight","StyleSheet","create","backgroundColor","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","borderRadius","marginLeft"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Text, Image,TouchableOpacity, StyleSheet, AsyncStorage, FlatList } from 'react-native';\r\nimport {SplashScreen} from '../OtherScreen'\r\n\r\nfunction ListUserChatScreen(props) {\r\n  const [chatList, setChatList] = React.useState([]);\r\n  const [isLoading, setLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    getData();\r\n  },[]);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      AsyncStorage.getItem('user').then((value) => {\r\n        const jsonValue = JSON.parse(value);\r\n        getChatList(jsonValue);\r\n      })\r\n    } catch(e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  const getChatList = (jsonValue) => {\r\n    fetch('http://192.168.0.101:19000/get_chat_list/' + jsonValue.user_id)\r\n    .then ((response) => response.json())\r\n    .then ( (res) => { \r\n      console.log(res)\r\n      setChatList(res);\r\n    })\r\n    .catch ((error) => {\r\n      console.log(error);\r\n    })\r\n    .finally(() => {\r\n      setLoading(false); \r\n    });\r\n  }\r\n\r\n    return (\r\n      <View \r\n       style={{flex: 1}}>\r\n          {isLoading? <SplashScreen/>:(\r\n          <FlatList\r\n            data={chatList}\r\n            keyExtractor= {item => item.contact_id.toString()}\r\n            renderItem={({ item }) => (\r\n              <View  style={ styles.container}>\r\n                <TouchableOpacity style={{flexDirection: 'row', margin: 10,}} onPress={() =>props.navigation.navigate('Comunication', {item: item})}>\r\n                  <Image\r\n                    style={styles.img}\r\n                    source= {{uri: item.user_avatar}}\r\n                  />\r\n                  <Text style={styles.textName}>{item.fullname}</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            )}  \r\n            showsHorizontalScrollIndicator={false}\r\n            ListEmptyComponent={ListEmpty}\r\n          /> \r\n        )}\r\n      </View>\r\n    );\r\n\r\n    function ListEmpty() {\r\n      return(\r\n        <View style={{justifyContent: 'center', alignItems: 'center'}}>\r\n          <Text style={{fontSize: 20, fontWeight: 'bold'}}>You don't communicate with anyone!!</Text>\r\n        </View>\r\n      )\r\n    }\r\n}\r\nexport {ListUserChatScreen};\r\n\r\nvar styles = StyleSheet.create({\r\n  container: {\r\n    margin: 10,\r\n    backgroundColor: 'white',\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  img: {\r\n    width: 80, \r\n    height: 80, \r\n    borderRadius: 50\r\n  },\r\n  textName: {\r\n    fontSize: 18, \r\n    fontWeight: 'bold', \r\n    marginLeft: 20}\r\n})"]},"metadata":{},"sourceType":"module"}