{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\QQBimApp\\\\QQBimApp\\\\src\\\\users\\\\ScreemFolder\\\\StoryScreen\\\\ReportStoryScreen.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\n\nfunction ReportStoryScreen(props) {\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      title = _React$useState2[0],\n      setTitle = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      reportContent = _React$useState4[0],\n      setReportContent = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      dataUser = _React$useState6[0],\n      setDataUser = _React$useState6[1];\n\n  var getData = function getData() {\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              AsyncStorage.getItem('user').then(function (value) {\n                var jsonValue = JSON.parse(value);\n                setDataUser(jsonValue);\n              });\n            } catch (e) {\n              console.log(e);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  React.useEffect(function () {\n    getData();\n  }, []);\n\n  var upload_report = function upload_report() {\n    if (title.length == 0 || reportContent.length == 0) {\n      alert('Title and content is not empty');\n    } else {\n      fetch('http://192.168.0.102:19000/report_story', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'story_id': props.route.params.item.story_id,\n          'report_title': title,\n          'report_content': reportContent,\n          'reporter': dataUser.user_id\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (res) {\n        showToast();\n        setTitle('');\n        setReportContent('');\n        addNewNotification();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  };\n\n  var showToast = function showToast() {\n    ToastAndroid.show(\"Successfull!\", ToastAndroid.SHORT);\n  };\n\n  return React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, React.createElement(StatusBar, {\n    hidden: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), React.createElement(View, {\n    style: styles.main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Report title:\"), React.createElement(TextInput, {\n    style: {\n      height: 40,\n      backgroundColor: 'white'\n    },\n    placeholder: \"Enter your report's title\",\n    value: title,\n    onChangeText: function onChangeText(text) {\n      return setTitle(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: {\n      marginTop: 10,\n      fontSize: 16,\n      fontWeight: 'bold'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Content of report:\"), React.createElement(View, {\n    scrollEnabled: true,\n    style: {\n      marginTop: 10,\n      backgroundColor: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    multiline: true,\n    placeholder: \"Write the reason of your report\",\n    textAlignVertical: 'top',\n    numberOfLines: 20,\n    scrollEnabled: true,\n    value: reportContent,\n    onChangeText: function onChangeText(text) {\n      return setReportContent(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: styles.upload,\n    onPress: function onPress() {\n      upload_report();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'center',\n      color: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 87\n    }\n  }, \"Upload your report\"))));\n}\n\nexport { ReportStoryScreen };\nvar styles = StyleSheet.create({\n  main: {\n    paddingLeft: 30,\n    paddingRight: 30,\n    paddingBottom: 1,\n    alignItems: 'stretch'\n  },\n  upload: {\n    marginTop: 20,\n    paddingTop: 15,\n    paddingBottom: 15,\n    backgroundColor: '#aa4fff',\n    borderRadius: 50,\n    borderWidth: 1,\n    borderColor: '#fff'\n  }\n});","map":{"version":3,"sources":["D:/QQBimApp/QQBimApp/src/users/ScreemFolder/StoryScreen/ReportStoryScreen.js"],"names":["React","ReportStoryScreen","props","useState","title","setTitle","reportContent","setReportContent","dataUser","setDataUser","getData","AsyncStorage","getItem","then","value","jsonValue","JSON","parse","e","console","log","useEffect","upload_report","length","alert","fetch","method","headers","Accept","body","stringify","route","params","item","story_id","user_id","response","json","res","showToast","addNewNotification","catch","error","ToastAndroid","show","SHORT","styles","main","fontSize","fontWeight","height","backgroundColor","text","marginTop","upload","textAlign","color","StyleSheet","create","paddingLeft","paddingRight","paddingBottom","alignItems","paddingTop","borderRadius","borderWidth","borderColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Text, StyleSheet, ScrollView, TextInput, TouchableOpacity, AsyncStorage, ToastAndroid, StatusBar} from 'react-native';\r\n\r\nfunction ReportStoryScreen (props) {\r\n    const [title, setTitle] = React.useState('');\r\n    const [reportContent, setReportContent] = React.useState('');\r\n    const [dataUser, setDataUser ]= React.useState([]);\r\n    const getData = async () => {\r\n        try {\r\n          AsyncStorage.getItem('user').then((value) => {\r\n            const jsonValue = JSON.parse(value);\r\n            setDataUser(jsonValue);\r\n          })\r\n        } catch(e) {\r\n          console.log(e)\r\n        }\r\n      }\r\n    React.useEffect(() => {\r\n        getData();\r\n    }, []);\r\n\r\n    const upload_report = () => {\r\n        \r\n        if(title.length == 0 || reportContent.length == 0){\r\n            alert('Title and content is not empty');\r\n        } else {\r\n            fetch('http://192.168.0.102:19000/report_story', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    'story_id': props.route.params.item.story_id,\r\n                    'report_title': title,\r\n                    'report_content': reportContent,\r\n                    'reporter': dataUser.user_id\r\n                })\r\n            })\r\n            .then ((response) => response.json())\r\n            .then ( (res) => { \r\n                showToast();\r\n                setTitle('');\r\n                setReportContent('');\r\n                addNewNotification();\r\n            })\r\n            .catch ((error) => {\r\n                console.log(error);\r\n            })\r\n        }\r\n    }\r\n    const showToast = () => {\r\n        ToastAndroid.show(\"Successfull!\", ToastAndroid.SHORT);\r\n    };\r\n    return (\r\n        <ScrollView>\r\n        <StatusBar hidden/>\r\n        <View style={styles.main}>\r\n            <Text style={{  fontSize: 16, fontWeight: 'bold'}}>Report title:</Text>\r\n            <TextInput\r\n                style={{ height: 40, backgroundColor: 'white' }}\r\n                placeholder=\"Enter your report's title\"\r\n                value={title}\r\n                onChangeText={text => setTitle(text)}\r\n            />\r\n            <Text style={{ marginTop: 10, fontSize: 16, fontWeight: 'bold'}}>Content of report:</Text>  \r\n            <View scrollEnabled  style={{ marginTop: 10, backgroundColor: 'white'}} >\r\n                <TextInput \r\n                    multiline \r\n                    placeholder=\"Write the reason of your report\" \r\n                    textAlignVertical={'top'}\r\n                    numberOfLines={20} \r\n                    scrollEnabled={true}\r\n                    value = {reportContent} \r\n                    onChangeText={text => setReportContent(text)} \r\n                />\r\n            </View>\r\n            <TouchableOpacity style={styles.upload} onPress={()=> {upload_report();}}><Text style={{textAlign: 'center', color: 'white'}}>Upload your report</Text></TouchableOpacity>\r\n        </View>\r\n    </ScrollView>\r\n    );\r\n}\r\nexport {ReportStoryScreen};\r\n\r\nvar styles = StyleSheet.create({\r\n    main: {\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingBottom: 1,\r\n        alignItems: 'stretch',\r\n    },\r\n    upload:{\r\n        marginTop: 20,\r\n        paddingTop: 15,\r\n        paddingBottom: 15,\r\n        backgroundColor:'#aa4fff',\r\n        borderRadius: 50,\r\n        borderWidth: 1,\r\n        borderColor: '#fff'\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}